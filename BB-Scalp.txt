//+------------------------------------------------------------------+
//|                                                     BB-Scalp.mq5 |
//|                                  Copyright 2024, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2024, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
//+------------------------------------------------------------------+
//| Include                                                          |
//+------------------------------------------------------------------+
#include <Expert\Expert.mqh>
//--- available signals
#include <Expert\Signal\SignalMA.mqh>
#include <Expert\Signal\SignalStoch.mqh>
#include <Expert\Signal\SignalRSI.mqh>
#include <Expert\Signal\SignalMACD.mqh>
//--- available trailing
#include <Expert\Trailing\TrailingMA.mqh>
//--- available money management
#include <Expert\Money\MoneyFixedLot.mqh>
#include <Expert\Money\MoneyPercent.mqh>
//+------------------------------------------------------------------+
//| Inputs                                                           |
//+------------------------------------------------------------------+
//--- inputs for expert
input string             Expert_Title            ="BB-Scalp";  // Document name
ulong                    Expert_MagicNumber      =22771;       //
bool                     Expert_EveryTick        =false;       //
//--- inputs for main signal
input int                Signal_ThresholdOpen    =10;          // Signal threshold value to open [0...100]
input int                Signal_ThresholdClose   =10;          // Signal threshold value to close [0...100]
input double             Signal_PriceLevel       =0.0;         // Price level to execute a deal
input double             Signal_StopLevel        =50.0;        // Stop Loss level (in points)
input double             Signal_TakeLevel        =50.0;        // Take Profit level (in points)
input int                Signal_Expiration       =4;           // Expiration of pending orders (in bars)
//--- inputs for EMA signals
input int                Signal_0_MA_PeriodMA    =50;          // Moving Average(50,0,...) EMA1Period Period of averaging
input int                Signal_0_MA_Shift       =0;           // Moving Average(50,0,...) EMA1Period Time shift
input ENUM_MA_METHOD     Signal_0_MA_Method      =MODE_SMA;    // Moving Average(50,0,...) EMA1Period Method of averaging
input ENUM_APPLIED_PRICE Signal_0_MA_Applied     =PRICE_CLOSE; // Moving Average(50,0,...) EMA1Period Prices series
input double             Signal_0_MA_Weight      =1.0;         // Moving Average(50,0,...) EMA1Period Weight [0...1.0]
input int                Signal_1_MA_PeriodMA    =100;         // Moving Average(100,0,...) EMA2Period Period of averaging
input int                Signal_1_MA_Shift       =0;           // Moving Average(100,0,...) EMA2Period Time shift
input ENUM_MA_METHOD     Signal_1_MA_Method      =MODE_SMA;    // Moving Average(100,0,...) EMA2Period Method of averaging
input ENUM_APPLIED_PRICE Signal_1_MA_Applied     =PRICE_CLOSE; // Moving Average(100,0,...) EMA2Period Prices series
input double             Signal_1_MA_Weight      =1.0;         // Moving Average(100,0,...) EMA2Period Weight [0...1.0]
//--- inputs for Stochastic signal
input int                Signal_Stoch_PeriodK    =5;           // Stochastic(5,3,3,...) K-period
input int                Signal_Stoch_PeriodD    =3;           // Stochastic(5,3,3,...) D-period
input int                Signal_Stoch_PeriodSlow =3;           // Stochastic(5,3,3,...) Period of slowing
input ENUM_STO_PRICE     Signal_Stoch_Applied    =STO_LOWHIGH; // Stochastic(5,3,3,...) Prices to apply to
input double             Signal_Stoch_Weight     =1.0;         // Stochastic(5,3,3,...) Weight [0...1.0]
//--- inputs for RSI signal
input int                Signal_RSI_PeriodRSI    =14;          // Relative Strength Index(14,...) Period of calculation
input ENUM_APPLIED_PRICE Signal_RSI_Applied      =PRICE_CLOSE; // Relative Strength Index(14,...) Prices series
input double             Signal_RSI_Weight       =1.0;         // Relative Strength Index(14,...) Weight [0...1.0]
//--- inputs for MACD signal
input int                Signal_MACD_PeriodFast  =12;          // MACD(12,26,9,PRICE_CLOSE) Period of fast EMA
input int                Signal_MACD_PeriodSlow  =26;          // MACD(12,26,9,PRICE_CLOSE) Period of slow EMA
input int                Signal_MACD_PeriodSignal=9;           // MACD(12,26,9,PRICE_CLOSE) Period of averaging of difference
input ENUM_APPLIED_PRICE Signal_MACD_Applied     =PRICE_CLOSE; // MACD(12,26,9,PRICE_CLOSE) Prices series
input double             Signal_MACD_Weight      =1.0;         // MACD(12,26,9,PRICE_CLOSE) Weight [0...1.0]
//--- inputs for trailing
input int                Trailing_MA_Period      =50;          // Period of MA
input int                Trailing_MA_Shift       =0;           // Shift of MA
input ENUM_MA_METHOD     Trailing_MA_Method      =MODE_SMA;    // Method of averaging
input ENUM_APPLIED_PRICE Trailing_MA_Applied     =PRICE_CLOSE; // Prices series
//--- inputs for money management
input double             Money_FixLot_Percent    =10.0;        // Percent of balance to trade
input double             Money_FixLot_Lots       =0.1;         // Fixed volume in lots
input bool               Money_UsePercent        =true;        // Use percentage of balance instead of fixed lots
//+------------------------------------------------------------------+
//| Global expert object                                             |
//+------------------------------------------------------------------+
CExpert ExtExpert;
//+------------------------------------------------------------------+
//| Initialization function of the expert                            |
//+------------------------------------------------------------------+
int OnInit()
  {
//--- Initializing expert
   if(!ExtExpert.Init(Symbol(),Period(),Expert_EveryTick,Expert_MagicNumber))
     {
      //--- failed
      printf(__FUNCTION__+": error initializing expert");
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
//--- Creating signal
   CExpertSignal *signal=new CExpertSignal;
   if(signal==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating signal");
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
//---
   ExtExpert.InitSignal(signal);
   signal.ThresholdOpen(Signal_ThresholdOpen);
   signal.ThresholdClose(Signal_ThresholdClose);
   signal.PriceLevel(Signal_PriceLevel);
   signal.StopLevel(Signal_StopLevel);
   signal.TakeLevel(Signal_TakeLevel);
   signal.Expiration(Signal_Expiration);
//--- Creating filter CSignalMA (EMA 50)
   CSignalMA *filter0=new CSignalMA;
   if(filter0==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter0");
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter0);
//--- Set filter parameters for EMA 50
   filter0.Symbol("EMA1Period");
   filter0.PeriodMA(Signal_0_MA_PeriodMA);
   filter0.Shift(Signal_0_MA_Shift);
   filter0.Method(Signal_0_MA_Method);
   filter0.Applied(Signal_0_MA_Applied);
   filter0.Weight(Signal_0_MA_Weight);
//--- Creating filter CSignalMA (EMA 100)
   CSignalMA *filter1=new CSignalMA;
   if(filter1==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter1");
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter1);
//--- Set filter parameters for EMA 100
   filter1.Symbol("EMA2Period");
   filter1.PeriodMA(Signal_1_MA_PeriodMA);
   filter1.Shift(Signal_1_MA_Shift);
   filter1.Method(Signal_1_MA_Method);
   filter1.Applied(Signal_1_MA_Applied);
   filter1.Weight(Signal_1_MA_Weight);
//--- Creating filter CSignalStoch
   CSignalStoch *filter2=new CSignalStoch;
   if(filter2==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter2");
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter2);
//--- Set filter parameters for Stochastic
   filter2.PeriodK(Signal_Stoch_PeriodK);
   filter2.PeriodD(Signal_Stoch_PeriodD);
   filter2.PeriodSlow(Signal_Stoch_PeriodSlow);
   filter2.Applied(Signal_Stoch_Applied);
   filter2.Weight(Signal_Stoch_Weight);
//--- Creating filter CSignalRSI
   CSignalRSI *filter3=new CSignalRSI;
   if(filter3==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter3");
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter3);
//--- Set filter parameters for RSI
   filter3.PeriodRSI(Signal_RSI_PeriodRSI);
   filter3.Applied(Signal_RSI_Applied);
   filter3.Weight(Signal_RSI_Weight);
//--- Creating filter CSignalMACD
   CSignalMACD *filter4=new CSignalMACD;
   if(filter4==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter4");
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter4);
//--- Set filter parameters for MACD
   filter4.PeriodFast(Signal_MACD_PeriodFast);
   filter4.PeriodSlow(Signal_MACD_PeriodSlow);
   filter4.PeriodSignal(Signal_MACD_PeriodSignal);
   filter4.Applied(Signal_MACD_Applied);
   filter4.Weight(Signal_MACD_Weight);
//--- Creation of trailing object
   CTrailingMA *trailing=new CTrailingMA;
   if(trailing==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating trailing");
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
//--- Add trailing to expert (will be deleted automatically))
   if(!ExtExpert.InitTrailing(trailing))
     {
      //--- failed
      printf(__FUNCTION__+": error initializing trailing");
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
//--- Set trailing parameters
   trailing.Period(Trailing_MA_Period);
   trailing.Shift(Trailing_MA_Shift);
   trailing.Method(Trailing_MA_Method);
   trailing.Applied(Trailing_MA_Applied);
//--- Creation of money object
   if (Money_UsePercent)
     {
      CMoneyPercent *money=new CMoneyPercent;
      if(money==NULL)
        {
         //--- failed
         printf(__FUNCTION__+": error creating money");
         ExtExpert.Deinit();
         return(INIT_FAILED);
        }
      //--- Add money to expert (will be deleted automatically)
      if(!ExtExpert.InitMoney(money))
        {
         //--- failed
         printf(__FUNCTION__+": error initializing money");
         ExtExpert.Deinit();
         return(INIT_FAILED);
        }
      //--- Set money parameters
      money.Percent(Money_FixLot_Percent);
     }
   else
     {
      CMoneyFixedLot *money=new CMoneyFixedLot;
      if(money==NULL)
        {
         //--- failed
         printf(__FUNCTION__+": error creating money");
         ExtExpert.Deinit();
         return(INIT_FAILED);
        }
      //--- Add money to expert (will be deleted automatically)
      if(!ExtExpert.InitMoney(money))
        {
         //--- failed
         printf(__FUNCTION__+": error initializing money");
         ExtExpert.Deinit();
         return(INIT_FAILED);
        }
      //--- Set money parameters
      money.Lots(Money_FixLot_Lots);
     }
//--- Check all trading objects parameters
   if(!ExtExpert.ValidationSettings())
     {
      //--- failed
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
//--- Tuning of all necessary indicators
   if(!ExtExpert.InitIndicators())
     {
      //--- failed
      printf(__FUNCTION__+": error initializing indicators");
      ExtExpert.Deinit();
      return(INIT_FAILED);
     }
//--- ok
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Deinitialization function of the expert                          |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   ExtExpert.Deinit();
  }
//+------------------------------------------------------------------+
//| "Tick" event handler function                                    |
//+------------------------------------------------------------------+
void OnTick()
  {
   ExtExpert.OnTick();
  }
//+------------------------------------------------------------------+
//| "Trade" event handler function                                   |
//+------------------------------------------------------------------+
void OnTrade()
  {
   ExtExpert.OnTrade();
  }
//+------------------------------------------------------------------+
//| "Timer" event handler function                                   |
//+------------------------------------------------------------------+
void OnTimer()
  {
   ExtExpert.OnTimer();
  }
//+------------------------------------------------------------------+
